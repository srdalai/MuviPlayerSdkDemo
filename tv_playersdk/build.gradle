plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdkVersion 32
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'com.muvi.tvplayer'
}

ext {
    pomVersion = '1.0.0-internal02'
    pomGroupID = "com.muvi.sdk"
    pomArtifactID = "tvplayer"
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            /*maven(MavenPublication) {
                groupId project.ext.pomGroupID
                artifactId project.ext.pomArtifactID
                version project.ext.pomVersion

                artifact(bundleDebugAar)
            }*/
            mavenJava(MavenPublication) {
                artifact(bundleDebugAar)
                groupId project.ext.pomGroupID
                artifactId project.ext.pomArtifactID
                version project.ext.pomVersion
                pom {
                    name = "Muvi Player SDK"
                    description = "Muvi Player SDK"
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            name = 'Muvi'
                        }
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                        configurations.api.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'

    api 'com.google.android.exoplayer:exoplayer:2.18.0'
    api 'com.google.android.exoplayer:extension-ima:2.18.0'
    //api 'com.google.android.exoplayer:extension-mediasession:2.18.0'
    //implementation 'com.google.android.exoplayer:extension-okhttp:2.18.0'

    api 'com.github.bumptech.glide:glide:4.13.2'

    //implementation 'javax.annotation:javax.annotation-api:1.3.2'
    //implementation 'org.jetbrains:annotations-java5:15.0'
}